# -*- coding: utf-8 -*-
"""Test_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P8RcXWoBTP6TMHbJUfImIiyfY_f5NSUB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import time

# Unified Air Purifier Data Generation Algorithm
def generate_live_data(n_samples=200):
    """
    Generate synthetic live data for air purifier sensor readings.

    Parameters:
        n_samples (int): Number of data points to generate.

    Returns:
        pd.DataFrame: A DataFrame containing generated features and targets.
    """
    np.random.seed()
    runtime = np.random.uniform(100, 10000, n_samples)      # Runtime in hours
    pm25 = np.random.uniform(10, 200, n_samples)           # PM2.5 levels
    fan_speed = np.random.choice([1, 2, 3, 4], n_samples)  # Fan speed levels
    odor_level = np.random.uniform(0, 100, n_samples)      # Odor sensor readings
    dust_level = np.random.uniform(0, 100, n_samples)      # Dust sensor readings

    remaining_days = 60 - (
        odor_level / 2 +
        dust_level / 2 +
        runtime / 300 +
        pm25 / 10
    ) + np.random.normal(0, 5, n_samples)

    filter_health = np.digitize(remaining_days, bins=[20, 40], right=True)

    data = pd.DataFrame({
        'runtime': runtime,
        'pm25': pm25,
        'fan_speed': fan_speed,
        'odor_level': odor_level,
        'dust_level': dust_level,
        'remaining_days': remaining_days,
        'filter_health': filter_health
    })

    return data

# Streamlit Dashboard with Real-Time Monitoring
def air_purifier_dashboard():
    st.title("Air Purifier Real-Time Monitoring Dashboard")

    # Real-Time Monitoring
    st.write("### Live Data Updates")
    placeholder = st.empty()

    # Simulate real-time data updates
    while True:
        # Generate new data
        data = generate_live_data()

        # Display live data table
        with placeholder.container():
            st.write("#### Live Data")
            st.dataframe(data.head())

            # Visualization: Filter Health Distribution
            st.write("#### Filter Health Distribution")
            health_counts = data['filter_health'].value_counts()
            st.bar_chart(health_counts)

            # Visualization: Runtime vs Remaining Days
            st.write("#### Runtime vs Remaining Days")
            fig, ax = plt.subplots()
            ax.scatter(data['runtime'], data['remaining_days'], alpha=0.6)
            ax.set_title("Runtime vs Remaining Days")
            ax.set_xlabel("Runtime (Hours)")
            ax.set_ylabel("Remaining Days")
            st.pyplot(fig)

        # Wait before updating
        time.sleep(5)  # Refresh every 5 seconds

# Main Function
def main():
    air_purifier_dashboard()

if __name__ == "__main__":
    main()
